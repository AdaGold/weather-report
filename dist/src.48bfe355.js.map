{"version":3,"sources":["src/index.js"],"names":["registerEventHandlers","document","addEventListener","displayWeatherAtLocation","getElementById","changeTemp","changeCity","changeWeatherAsync","toggleFunction","skyConditions","getElementsByClassName","condition","toggleSky","textContent","switchFAndC","FToC","F","CToF","C","state","tempMetric","temperatureC","Math","round","temperatureF","innerHTML","cityName","weatherDescription","weatherIconName","oldIconName","skyImgUrl","currentLat","currentLon","weatherMainToIcon","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","console","log","axios","get","params","lat","lon","then","weatherResponse","data","current","temp","weather","description","main","toUpperCase","cityResponse","address","city","region","county","checkTextColorChange","checkSeasonChange","setWeatherIcon","setSky","setWeatherDescription","catch","error","change","src","style","color","value","classList","toggle","q","response","updateState","updateUI","body","background","backgroundSize","replace"],"mappings":"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","file":"src.48bfe355.js","sourceRoot":"..","sourcesContent":["'use strict';\n// import 'regenerator-runtime/runtime';\n// import axios from 'axios';\n\nconst registerEventHandlers = () => {\n  document.addEventListener('DOMContentLoaded', displayWeatherAtLocation);\n  document.getElementById(\"down-temp\").addEventListener('click', () => changeTemp(-1));\n  document.getElementById(\"up-temp\").addEventListener('click', () => changeTemp(1));\n  document.getElementById(\"city-search-input\").addEventListener(\"search\", changeCity)\n  document.getElementById(\"city-search-input\").addEventListener(\"search\", changeWeatherAsync);\n  document.getElementById(\"selected-location\").addEventListener(\"click\", changeWeatherAsync);\n  document.getElementById(\"current-location\").addEventListener(\"click\", displayWeatherAtLocation);\n  document.getElementById(\"city-search-button\").addEventListener(\"click\", toggleFunction)\n  const skyConditions = document.getElementsByClassName(\"weather-dropdown-item\");\n  for (const condition of skyConditions){\n    condition.addEventListener(\"click\", () => toggleSky(condition.textContent))\n  };\n  document.getElementById(\"toggle-f-c\").addEventListener('click', switchFAndC);\n};\n\nconst FToC = (F) => {\n  return (F - 32) * .5556\n} \n\nconst CToF = (C) => {\n  return (C * 1.8) + 32\n} \n\nconst switchFAndC = () => {\n  if (state.tempMetric === \"F\"){\n    state.tempMetric = \"C\"\n    state.temperatureC = Math.round(FToC(state.temperatureF))\n    document.getElementById(\"temp\").innerHTML = `${state.temperatureC}&deg;`;\n  }else{\n    state.tempMetric = \"F\"\n    document.getElementById(\"temp\").innerHTML = `${state.temperatureF}&deg;`;\n  }\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {registerEventHandlers(); displayWeatherAtLocation();});\n\nconst state = {\n  tempMetric: \"F\",\n  temperatureF: 60,\n  temperatureC: 15.5568,\n  cityName: 'Tokyo',\n  weatherDescription: \"scattered clouds\",\n  weatherIconName: \"bi-cloud-lightning-rain\",\n  oldIconName: null,\n  skyImgUrl: null,\n  currentLat: null,\n  currentLon: null \n}\n\nconst weatherMainToIcon = {\"THUNDERSTORM\": [\"bi-cloud-lightning-rain\", \"/ada-project-docs/assets/thunderstorm_sky.jpg\"], \"DRIZZLE\": [\"bi-cloud-drizzle\", \"/ada-project-docs/assets/rain_sky.jpg\"], \"RAIN\": [\"bi-cloud-rain\", \"/ada-project-docs/assets/rain_sky.jpg\"], \"SNOW\": [\"bi-cloud-snow\", \"/ada-project-docs/assets/snow_sky.jpg\"], \"MIST\": [\"bi-cloud-haze\", \"/ada-project-docs/assets/mist_sky.jpg\"], \"SMOKE\": [\"bi-cloud-fog\", \"/ada-project-docs/assets/mist_sky.jpg\"], \"HAZE\": [\"bi-cloud-haze\", \"/ada-project-docs/assets/mist_sky.jpg\"], \"DUST\": [\"bi-cloud-fog\", \"/ada-project-docs/assets/mist_sky.jpg\"], \"FOG\": [\"bi-cloud-haze\", \"/ada-project-docs/assets/mist_sky.jpg\"], \"SAND\": [\"bi-cloud-fog\", \"/ada-project-docs/assets/mist_sky.jpg\"], \"DUST\": [\"bi-cloud-fog\", \"/ada-project-docs/assets/mist_sky.jpg\"], \"ASH\": [\"bi-cloud-fog\", \"/ada-project-docs/assets/mist_sky.jpg\"], \"SQUALL\": [\"bi-cloud-fog\", \"/ada-project-docs/assets/mist_sky.jpg\"], \"TORNADO\": [\"bi-cloud-fog\", \"/ada-project-docs/assets/mist_sky.jpg\"], \"CLEAR\": [\"bi-sun\", \"/ada-project-docs/assets/clear_sky.jpg\"], \"CLOUDS\": ['bi-clouds', \"/ada-project-docs/assets/broken_clouds_sky.jpg\"]}\n\nconst displayWeatherAtLocation = () => {\n  navigator.geolocation.getCurrentPosition((position) => {\n    const latitude = position.coords.latitude;\n    const longitude = position.coords.longitude;\n    state.currentLat = latitude;\n    state.currentLon = longitude;\n    console.log(\"got geolocation\", position)\n    axios.get(\"https://weather-report-server.herokuapp.com/weather\", {\n        params: {\n          lat: state.currentLat,\n          lon: state.currentLon\n        },\n      })\n      .then((weatherResponse) => {\n        //Store response data\n        console.log(weatherResponse.data)\n        state.temperatureF = Math.round(weatherResponse.data.current.temp)\n        state.temperatureC = FToC(state.temperatureF)\n        state.weatherDescription = weatherResponse.data.current.weather[0].description;\n        state.oldIconName = state.weatherIconName;\n        state.weatherIconName = weatherMainToIcon[weatherResponse.data.current.weather[0].main.toUpperCase()][0];\n        state.skyImgUrl = weatherMainToIcon[weatherResponse.data.current.weather[0].main.toUpperCase()][1];\n        console.log('successfully stored response data!', weatherResponse.data);\n        axios.get(\"https://weather-report-server.herokuapp.com/city\", {\n          params: {\n            lat: state.currentLat,\n            lon: state.currentLon\n          },\n        })\n        .then((cityResponse) => {\n          console.log(\"got the city name\", cityResponse.data)\n\n          state.cityName = cityResponse.data.address.city || cityResponse.data.address.region || cityResponse.data.address.county\n                  //Update UI\n          document.getElementById(\"temp\").innerHTML = `${state.temperatureF}&deg;`;\n          checkTextColorChange();\n          checkSeasonChange();\n          setWeatherIcon()\n          setSky();\n          setWeatherDescription();\n          document.getElementById(\"city-name\").textContent = state.cityName\n          console.log('successfully updated UI!');\n\n        })\n        .catch((error) => {\n          console.log(\"error with getting city\", error)\n        });\n      })\n      .catch((error) => {\n        console.log('error!', error)\n      });\n  });\n};\n\nconst changeTemp = (change) => {\n  state.temperatureF += change\n  document.getElementById(\"temp\").innerHTML = `${state.temperatureF}&deg;`;\n  checkTextColorChange();\n  checkSeasonChange();\n};\n\nconst checkSeasonChange = () => {\n  if (state.temperatureF <= 32){\n    document.getElementById(\"temp-img\").src = \"/ada-project-docs/assets/winter_landscape.png\";\n  } else if (32 < state.temperatureF && state.temperatureF < 56){\n    document.getElementById(\"temp-img\").src = \"/ada-project-docs/assets/fall_landscape.png\";\n  } else if (56 <= state.temperatureF  && state.temperatureF < 75){\n    document.getElementById(\"temp-img\").src = \"/ada-project-docs/assets/spring_landscape.png\";\n  } else if (75 <= state.temperatureF  && state.temperatureF < 95) {\n    document.getElementById(\"temp-img\").src = \"/ada-project-docs/assets/summer_landscape.png\";\n  }else {\n    document.getElementById(\"temp-img\").src = \"/ada-project-docs/assets/hottest_landscape.png\";\n  }\n};\n\nconst checkTextColorChange = () => {\n  if (state.temperatureF <= 49){\n    document.getElementById(\"temp\").style.color = \"teal\";\n  }else if (state.temperatureF >= 50 && state.temperatureF < 60){\n    document.getElementById(\"temp\").style.color = \"green\";\n  }else if (state.temperatureF >= 60 && state.temperatureF < 70){\n    document.getElementById(\"temp\").style.color = \"yellow\";\n  } else if (state.temperatureF >= 70 && state.temperatureF < 80){\n    document.getElementById(\"temp\").style.color = \"orange\";\n  } else{\n    document.getElementById(\"temp\").style.color = \"red\";\n  }\n};\n\nconst changeCity = () => {\n  state.cityName = document.getElementById(\"city-search-input\").value;\n  document.getElementById(\"city-name\").textContent = state.cityName;\n};\n\nconst toggleFunction = () => {\n  document.getElementById(\"city-search-button\").classList.toggle(\"show\");\n}\n\nconst changeWeatherAsync = async () => {\n  const q = state.cityName;\n  try{\n    let response = await axios.get(\"https://weather-report-server.herokuapp.com/location\", {\n      params: {\n        q\n      }\n    });\n    const lat = response.data[0].lat;\n    const lon = response.data[0].lon;\n    console.log('success!', response.data);\n    try{\n      let weatherResponse = await axios.get(\"https://weather-report-server.herokuapp.com/weather\", {\n        params: {\n          lat,\n          lon\n        }\n      });\n        updateState(weatherResponse);\n        updateUI();\n      }catch(error){\n        console.log('weather error!', error)\n      }\n  }catch(error){\n    console.log('location error', error)\n  };\n};\n\nconst updateState = (weatherResponse) => {\n  state.temperatureF = Math.round(weatherResponse.data.current.temp);\n  state.weatherDescription = weatherResponse.data.current.weather[0].description;\n  state.oldIconName = state.weatherIconName;\n  state.weatherIconName = weatherMainToIcon[weatherResponse.data.current.weather[0].main.toUpperCase()][0];\n  state.skyImgUrl = weatherMainToIcon[weatherResponse.data.current.weather[0].main.toUpperCase()][1];\n  console.log('successfully stored response data!', weatherResponse.data);\n}\n\nconst updateUI = () => {\n  document.getElementById(\"temp\").innerHTML = `${state.temperatureF}&deg;`;\n  checkTextColorChange();\n  checkSeasonChange();\n  setWeatherIcon();\n  setSky();\n  setWeatherDescription();\n  console.log('successfully updated UI!');\n}\n\nconst setSky = () => {\n  document.body.style.background = `url(${state.skyImgUrl}) no-repeat top fixed`;\n  document.body.style.backgroundSize = '100% 100%';\n}\nconst setWeatherIcon = () => {\n  document.getElementsByClassName(\"weather-icon\")[1].classList.replace(state.oldIconName, state.weatherIconName);\n}\n\nconst setWeatherDescription = () => {\n  document.getElementById(\"wdescription\").textContent = state.weatherDescription;\n}\n\nconst toggleSky = (condition) => {\n  state.weatherDescription = condition; \n  setWeatherDescription();\n  state.skyImgUrl = weatherMainToIcon[condition.toUpperCase()][1];\n  setSky();\n  state.oldIconName = state.weatherIconName;\n  state.weatherIconName = weatherMainToIcon[condition.toUpperCase()][0];\n  setWeatherIcon();\n};\n\n\n// const changeWeather = () => {\n//   const q = state.cityName;\n\n  // axios.get(\"https://weather-report-server.herokuapp.com/location\", {\n  //   params: {\n  //     q\n  //   }\n  // })\n  // .then((response) => {\n  //   const lat = response.data[0].lat;\n  //   const lon = response.data[0].lon;\n  //   console.log('success!', response.data);\n  //   axios.get(\"https://weather-report-server.herokuapp.com/weather\", {\n  //     params: {\n  //       lat,\n  //       lon\n  //     }\n  //   })\n    // .then((response) => {\n    //   //Store response data\n    //   state.temperatureF = Math.round(response.data.current.temp)\n    //   state.weatherDescription = response.data.current.weather[0].description;\n    //   state.oldIconName = state.weatherIconName;\n    //   state.weatherIconName = weatherMainToIcon[response.data.current.weather[0].main][0];\n    //   state.skyImgUrl = weatherMainToIcon[response.data.current.weather[0].main][1];\n    //   console.log('successfully stored response data!', response.data);\n    // })\n    // .then(() => {\n    //   //Update UI\n    //   document.getElementById(\"temp\").textContent = `${state.temperatureF}&deg;`;\n    //   checkTextColorChange();\n    //   checkSeasonChange();\n    //   setWeatherIcon()\n    //   setSky();\n    //   setWeatherDescription();\n    //   console.log('successfully updated UI!');\n    // })\n    // .catch((error) => {\n    //   console.log('error!', error)\n    // });\n//   })\n//   .catch((error) => {\n//     console.log('error!', error)\n//   });\n// }\n"]}